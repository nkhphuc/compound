services:
  # Database
  postgres:
    image: postgres:16
    container_name: compound-postgres
    environment:
      POSTGRES_DB: compound_chemistry
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
    ports:
      - "5432:5432"
    volumes:
      - ./db/data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - compound-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: compound-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"      # S3 API
      - "9001:9001"      # MinIO Console
    volumes:
      - ./uploads:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - compound-network

  # MinIO Initialization
  minio-init:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - ./minio-init.sh:/minio-init.sh:ro
      - ./minio-cors.xml:/minio-cors.xml:ro
    entrypoint: /bin/sh /minio-init.sh
    networks:
      - compound-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: compound-backend
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:your_password@postgres:5432/compound_chemistry
      - CORS_ORIGIN=http://localhost
      - LOG_LEVEL=info
      - S3_ENDPOINT=http://minio:9000
      - S3_PUBLIC_ENDPOINT=http://localhost:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=compound-uploads
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    restart: unless-stopped
    networks:
      - compound-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: compound-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - compound-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  compound-network:
    driver: bridge
